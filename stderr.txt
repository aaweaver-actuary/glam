============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-8.3.2, pluggy-1.5.0
rootdir: /home/andy/glam
configfile: pyproject.toml
plugins: anyio-4.4.0
collected 28 items / 18 deselected / 10 selected

src/glam/tests/test_plots.py .FFFFFFFFF                                  [100%]

=================================== FAILURES ===================================
_________________________________ test_add_bar _________________________________

self = Figure({
    'data': [], 'layout': {'template': '...'}
})

    def _validate_get_grid_ref(self):
        try:
            grid_ref = self._grid_ref
            if grid_ref is None:
>               raise AttributeError("_grid_ref")
E               AttributeError: _grid_ref

.venv/lib/python3.11/site-packages/plotly/basedatatypes.py:2336: AttributeError

During handling of the above exception, another exception occurred:

sample_dataframe =      feature  hit_count  current_model  test_model  count
0   0.304717          0       0.828290    0.411801     97
1 ...  0       0.919766    0.153177     42
99 -0.905479          1       0.129983    0.450580     95

[100 rows x 5 columns]

    def test_add_bar(sample_dataframe):
        """Test the _add_bar function."""
        fig = go.Figure()
        config = get_configs()[3]  # Use the CountConfig
>       fig = _add_bar(fig, sample_dataframe["feature"], sample_dataframe["count"], config)

src/glam/tests/test_plots.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/glam/plots.py:104: in _add_bar
    fig.add_trace(
.venv/lib/python3.11/site-packages/plotly/graph_objs/_figure.py:913: in add_trace
    return super(Figure, self).add_trace(
.venv/lib/python3.11/site-packages/plotly/basedatatypes.py:2106: in add_trace
    return self.add_traces(
.venv/lib/python3.11/site-packages/plotly/graph_objs/_figure.py:993: in add_traces
    return super(Figure, self).add_traces(
.venv/lib/python3.11/site-packages/plotly/basedatatypes.py:2236: in add_traces
    self._set_trace_grid_position(trace, row, col, secondary_y)
.venv/lib/python3.11/site-packages/plotly/basedatatypes.py:2327: in _set_trace_grid_position
    grid_ref = self._validate_get_grid_ref()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Figure({
    'data': [], 'layout': {'template': '...'}
})

    def _validate_get_grid_ref(self):
        try:
            grid_ref = self._grid_ref
            if grid_ref is None:
                raise AttributeError("_grid_ref")
        except AttributeError:
>           raise Exception(
                "In order to reference traces by row and column, "
                "you must first use "
                "plotly.tools.make_subplots "
                "to create the figure with a subplot grid."
            )
E           Exception: In order to reference traces by row and column, you must first use plotly.tools.make_subplots to create the figure with a subplot grid.

.venv/lib/python3.11/site-packages/plotly/basedatatypes.py:2338: Exception
_______________________________ test_add_scatter _______________________________

self = Figure({
    'data': [], 'layout': {'template': '...'}
})

    def _validate_get_grid_ref(self):
        try:
            grid_ref = self._grid_ref
            if grid_ref is None:
>               raise AttributeError("_grid_ref")
E               AttributeError: _grid_ref

.venv/lib/python3.11/site-packages/plotly/basedatatypes.py:2336: AttributeError

During handling of the above exception, another exception occurred:

sample_dataframe =      feature  hit_count  current_model  test_model  count
0   0.304717          0       0.828290    0.411801     97
1 ...  0       0.919766    0.153177     42
99 -0.905479          1       0.129983    0.450580     95

[100 rows x 5 columns]

    def test_add_scatter(sample_dataframe):
        """Test the _add_scatter function."""
        fig = go.Figure()
        config = get_configs()[2]  # Use the ActualConfig
>       fig = _add_scatter(
            fig, sample_dataframe["feature"], sample_dataframe["hit_count"], config
        )

src/glam/tests/test_plots.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/glam/plots.py:128: in _add_scatter
    fig.add_trace(
.venv/lib/python3.11/site-packages/plotly/graph_objs/_figure.py:913: in add_trace
    return super(Figure, self).add_trace(
.venv/lib/python3.11/site-packages/plotly/basedatatypes.py:2106: in add_trace
    return self.add_traces(
.venv/lib/python3.11/site-packages/plotly/graph_objs/_figure.py:993: in add_traces
    return super(Figure, self).add_traces(
.venv/lib/python3.11/site-packages/plotly/basedatatypes.py:2236: in add_traces
    self._set_trace_grid_position(trace, row, col, secondary_y)
.venv/lib/python3.11/site-packages/plotly/basedatatypes.py:2327: in _set_trace_grid_position
    grid_ref = self._validate_get_grid_ref()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Figure({
    'data': [], 'layout': {'template': '...'}
})

    def _validate_get_grid_ref(self):
        try:
            grid_ref = self._grid_ref
            if grid_ref is None:
                raise AttributeError("_grid_ref")
        except AttributeError:
>           raise Exception(
                "In order to reference traces by row and column, "
                "you must first use "
                "plotly.tools.make_subplots "
                "to create the figure with a subplot grid."
            )
E           Exception: In order to reference traces by row and column, you must first use plotly.tools.make_subplots to create the figure with a subplot grid.

.venv/lib/python3.11/site-packages/plotly/basedatatypes.py:2338: Exception
______________________________ test_update_layout ______________________________

    def test_update_layout():
        """Test the _update_layout function."""
        fig = go.Figure()
>       fig = _update_layout(fig, "Test Title", "X Axis", "Y Axis", "Y2 Axis")

src/glam/tests/test_plots.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/glam/plots.py:159: in _update_layout
    fig.update_layout(
.venv/lib/python3.11/site-packages/plotly/graph_objs/_figure.py:788: in update_layout
    return super(Figure, self).update_layout(dict1, overwrite, **kwargs)
.venv/lib/python3.11/site-packages/plotly/basedatatypes.py:1391: in update_layout
    self.layout.update(dict1, overwrite=overwrite, **kwargs)
.venv/lib/python3.11/site-packages/plotly/basedatatypes.py:5131: in update
    BaseFigure._perform_update(self, kwargs, overwrite=overwrite)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plotly_obj = Layout({
    'template': '...'
})
update_obj = {'secondary_y': False, 'showlegend': True, 'title': 'Test Title', 'xaxis_title': 'X Axis', ...}
overwrite = False

    @staticmethod
    def _perform_update(plotly_obj, update_obj, overwrite=False):
        """
        Helper to support the update() methods on :class:`BaseFigure` and
        :class:`BasePlotlyType`
    
        Parameters
        ----------
        plotly_obj : BasePlotlyType|tuple[BasePlotlyType]
            Object to up updated
        update_obj : dict|list[dict]|tuple[dict]
            When ``plotly_obj`` is an instance of :class:`BaseFigure`,
            ``update_obj`` should be a dict
    
            When ``plotly_obj`` is a tuple of instances of
            :class:`BasePlotlyType`, ``update_obj`` should be a tuple or list
            of dicts
        """
        from _plotly_utils.basevalidators import (
            CompoundValidator,
            CompoundArrayValidator,
        )
    
        if update_obj is None:
            # Nothing to do
            return
        elif isinstance(plotly_obj, BasePlotlyType):
    
            # Handle initializing subplot ids
            # -------------------------------
            # This should be valid even if xaxis2 hasn't been initialized:
            # >>> layout.update(xaxis2={'title': 'xaxis 2'})
            for key in update_obj:
                # special handling for missing keys that match _subplot_re_match
                if key not in plotly_obj and isinstance(plotly_obj, BaseLayoutType):
                    # try _subplot_re_match
                    match = plotly_obj._subplot_re_match(key)
                    if match:
                        # We need to create a subplotid object
                        plotly_obj[key] = {}
                        continue
    
                err = _check_path_in_prop_tree(plotly_obj, key, error_cast=ValueError)
                if err is not None:
>                   raise err
E                   ValueError: Invalid property specified for object of type plotly.graph_objs.Layout: 'secondary'
E                   
E                   Did you mean "ternary"?
E                   
E                       Valid properties:
E                           activeselection
E                               :class:`plotly.graph_objects.layout.Activeselection`
E                               instance or dict with compatible properties
E                           activeshape
E                               :class:`plotly.graph_objects.layout.Activeshape`
E                               instance or dict with compatible properties
E                           annotations
E                               A tuple of
E                               :class:`plotly.graph_objects.layout.Annotation`
E                               instances or dicts with compatible properties
E                           annotationdefaults
E                               When used in a template (as
E                               layout.template.layout.annotationdefaults), sets the
E                               default property values to use for elements of
E                               layout.annotations
E                           autosize
E                               Determines whether or not a layout width or height that
E                               has been left undefined by the user is initialized on
E                               each relayout. Note that, regardless of this attribute,
E                               an undefined layout width or height is always
E                               initialized on the first call to plot.
E                           autotypenumbers
E                               Using "strict" a numeric string in trace data is not
E                               converted to a number. Using *convert types* a numeric
E                               string in trace data may be treated as a number during
E                               automatic axis `type` detection. This is the default
E                               value; however it could be overridden for individual
E                               axes.
E                           barcornerradius
E                               Sets the rounding of bar corners. May be an integer
E                               number of pixels, or a percentage of bar width (as a
E                               string ending in %).
E                           bargap
E                               Sets the gap (in plot fraction) between bars of
E                               adjacent location coordinates.
E                           bargroupgap
E                               Sets the gap (in plot fraction) between bars of the
E                               same location coordinate.
E                           barmode
E                               Determines how bars at the same location coordinate are
E                               displayed on the graph. With "stack", the bars are
E                               stacked on top of one another With "relative", the bars
E                               are stacked on top of one another, with negative values
E                               below the axis, positive values above With "group", the
E                               bars are plotted next to one another centered around
E                               the shared location. With "overlay", the bars are
E                               plotted over one another, you might need to reduce
E                               "opacity" to see multiple bars.
E                           barnorm
E                               Sets the normalization for bar traces on the graph.
E                               With "fraction", the value of each bar is divided by
E                               the sum of all values at that location coordinate.
E                               "percent" is the same but multiplied by 100 to show
E                               percentages.
E                           boxgap
E                               Sets the gap (in plot fraction) between boxes of
E                               adjacent location coordinates. Has no effect on traces
E                               that have "width" set.
E                           boxgroupgap
E                               Sets the gap (in plot fraction) between boxes of the
E                               same location coordinate. Has no effect on traces that
E                               have "width" set.
E                           boxmode
E                               Determines how boxes at the same location coordinate
E                               are displayed on the graph. If "group", the boxes are
E                               plotted next to one another centered around the shared
E                               location. If "overlay", the boxes are plotted over one
E                               another, you might need to set "opacity" to see them
E                               multiple boxes. Has no effect on traces that have
E                               "width" set.
E                           calendar
E                               Sets the default calendar system to use for
E                               interpreting and displaying dates throughout the plot.
E                           clickmode
E                               Determines the mode of single click interactions.
E                               "event" is the default value and emits the
E                               `plotly_click` event. In addition this mode emits the
E                               `plotly_selected` event in drag modes "lasso" and
E                               "select", but with no event data attached (kept for
E                               compatibility reasons). The "select" flag enables
E                               selecting single data points via click. This mode also
E                               supports persistent selections, meaning that pressing
E                               Shift while clicking, adds to / subtracts from an
E                               existing selection. "select" with `hovermode`: "x" can
E                               be confusing, consider explicitly setting `hovermode`:
E                               "closest" when using this feature. Selection events are
E                               sent accordingly as long as "event" flag is set as
E                               well. When the "event" flag is missing, `plotly_click`
E                               and `plotly_selected` events are not fired.
E                           coloraxis
E                               :class:`plotly.graph_objects.layout.Coloraxis` instance
E                               or dict with compatible properties
E                           colorscale
E                               :class:`plotly.graph_objects.layout.Colorscale`
E                               instance or dict with compatible properties
E                           colorway
E                               Sets the default trace colors.
E                           computed
E                               Placeholder for exporting automargin-impacting values
E                               namely `margin.t`, `margin.b`, `margin.l` and
E                               `margin.r` in "full-json" mode.
E                           datarevision
E                               If provided, a changed value tells `Plotly.react` that
E                               one or more data arrays has changed. This way you can
E                               modify arrays in-place rather than making a complete
E                               new copy for an incremental change. If NOT provided,
E                               `Plotly.react` assumes that data arrays are being
E                               treated as immutable, thus any data array with a
E                               different identity from its predecessor contains new
E                               data.
E                           dragmode
E                               Determines the mode of drag interactions. "select" and
E                               "lasso" apply only to scatter traces with markers or
E                               text. "orbit" and "turntable" apply only to 3D scenes.
E                           editrevision
E                               Controls persistence of user-driven changes in
E                               `editable: true` configuration, other than trace names
E                               and axis titles. Defaults to `layout.uirevision`.
E                           extendfunnelareacolors
E                               If `true`, the funnelarea slice colors (whether given
E                               by `funnelareacolorway` or inherited from `colorway`)
E                               will be extended to three times its original length by
E                               first repeating every color 20% lighter then each color
E                               20% darker. This is intended to reduce the likelihood
E                               of reusing the same color when you have many slices,
E                               but you can set `false` to disable. Colors provided in
E                               the trace, using `marker.colors`, are never extended.
E                           extendiciclecolors
E                               If `true`, the icicle slice colors (whether given by
E                               `iciclecolorway` or inherited from `colorway`) will be
E                               extended to three times its original length by first
E                               repeating every color 20% lighter then each color 20%
E                               darker. This is intended to reduce the likelihood of
E                               reusing the same color when you have many slices, but
E                               you can set `false` to disable. Colors provided in the
E                               trace, using `marker.colors`, are never extended.
E                           extendpiecolors
E                               If `true`, the pie slice colors (whether given by
E                               `piecolorway` or inherited from `colorway`) will be
E                               extended to three times its original length by first
E                               repeating every color 20% lighter then each color 20%
E                               darker. This is intended to reduce the likelihood of
E                               reusing the same color when you have many slices, but
E                               you can set `false` to disable. Colors provided in the
E                               trace, using `marker.colors`, are never extended.
E                           extendsunburstcolors
E                               If `true`, the sunburst slice colors (whether given by
E                               `sunburstcolorway` or inherited from `colorway`) will
E                               be extended to three times its original length by first
E                               repeating every color 20% lighter then each color 20%
E                               darker. This is intended to reduce the likelihood of
E                               reusing the same color when you have many slices, but
E                               you can set `false` to disable. Colors provided in the
E                               trace, using `marker.colors`, are never extended.
E                           extendtreemapcolors
E                               If `true`, the treemap slice colors (whether given by
E                               `treemapcolorway` or inherited from `colorway`) will be
E                               extended to three times its original length by first
E                               repeating every color 20% lighter then each color 20%
E                               darker. This is intended to reduce the likelihood of
E                               reusing the same color when you have many slices, but
E                               you can set `false` to disable. Colors provided in the
E                               trace, using `marker.colors`, are never extended.
E                           font
E                               Sets the global font. Note that fonts used in traces
E                               and other layout components inherit from the global
E                               font.
E                           funnelareacolorway
E                               Sets the default funnelarea slice colors. Defaults to
E                               the main `colorway` used for trace colors. If you
E                               specify a new list here it can still be extended with
E                               lighter and darker colors, see
E                               `extendfunnelareacolors`.
E                           funnelgap
E                               Sets the gap (in plot fraction) between bars of
E                               adjacent location coordinates.
E                           funnelgroupgap
E                               Sets the gap (in plot fraction) between bars of the
E                               same location coordinate.
E                           funnelmode
E                               Determines how bars at the same location coordinate are
E                               displayed on the graph. With "stack", the bars are
E                               stacked on top of one another With "group", the bars
E                               are plotted next to one another centered around the
E                               shared location. With "overlay", the bars are plotted
E                               over one another, you might need to reduce "opacity" to
E                               see multiple bars.
E                           geo
E                               :class:`plotly.graph_objects.layout.Geo` instance or
E                               dict with compatible properties
E                           grid
E                               :class:`plotly.graph_objects.layout.Grid` instance or
E                               dict with compatible properties
E                           height
E                               Sets the plot's height (in px).
E                           hiddenlabels
E                               hiddenlabels is the funnelarea & pie chart analog of
E                               visible:'legendonly' but it can contain many labels,
E                               and can simultaneously hide slices from several
E                               pies/funnelarea charts
E                           hiddenlabelssrc
E                               Sets the source reference on Chart Studio Cloud for
E                               `hiddenlabels`.
E                           hidesources
E                               Determines whether or not a text link citing the data
E                               source is placed at the bottom-right cored of the
E                               figure. Has only an effect only on graphs that have
E                               been generated via forked graphs from the Chart Studio
E                               Cloud (at https://chart-studio.plotly.com or on-
E                               premise).
E                           hoverdistance
E                               Sets the default distance (in pixels) to look for data
E                               to add hover labels (-1 means no cutoff, 0 means no
E                               looking for data). This is only a real distance for
E                               hovering on point-like objects, like scatter points.
E                               For area-like objects (bars, scatter fills, etc)
E                               hovering is on inside the area and off outside, but
E                               these objects will not supersede hover on point-like
E                               objects in case of conflict.
E                           hoverlabel
E                               :class:`plotly.graph_objects.layout.Hoverlabel`
E                               instance or dict with compatible properties
E                           hovermode
E                               Determines the mode of hover interactions. If
E                               "closest", a single hoverlabel will appear for the
E                               "closest" point within the `hoverdistance`. If "x" (or
E                               "y"), multiple hoverlabels will appear for multiple
E                               points at the "closest" x- (or y-) coordinate within
E                               the `hoverdistance`, with the caveat that no more than
E                               one hoverlabel will appear per trace. If *x unified*
E                               (or *y unified*), a single hoverlabel will appear
E                               multiple points at the closest x- (or y-) coordinate
E                               within the `hoverdistance` with the caveat that no more
E                               than one hoverlabel will appear per trace. In this
E                               mode, spikelines are enabled by default perpendicular
E                               to the specified axis. If false, hover interactions are
E                               disabled.
E                           hoversubplots
E                               Determines expansion of hover effects to other subplots
E                               If "single" just the axis pair of the primary point is
E                               included without overlaying subplots. If "overlaying"
E                               all subplots using the main axis and occupying the same
E                               space are included. If "axis", also include stacked
E                               subplots using the same axis when `hovermode` is set to
E                               "x", *x unified*, "y" or *y unified*.
E                           iciclecolorway
E                               Sets the default icicle slice colors. Defaults to the
E                               main `colorway` used for trace colors. If you specify a
E                               new list here it can still be extended with lighter and
E                               darker colors, see `extendiciclecolors`.
E                           images
E                               A tuple of :class:`plotly.graph_objects.layout.Image`
E                               instances or dicts with compatible properties
E                           imagedefaults
E                               When used in a template (as
E                               layout.template.layout.imagedefaults), sets the default
E                               property values to use for elements of layout.images
E                           legend
E                               :class:`plotly.graph_objects.layout.Legend` instance or
E                               dict with compatible properties
E                           mapbox
E                               :class:`plotly.graph_objects.layout.Mapbox` instance or
E                               dict with compatible properties
E                           margin
E                               :class:`plotly.graph_objects.layout.Margin` instance or
E                               dict with compatible properties
E                           meta
E                               Assigns extra meta information that can be used in
E                               various `text` attributes. Attributes such as the
E                               graph, axis and colorbar `title.text`, annotation
E                               `text` `trace.name` in legend items, `rangeselector`,
E                               `updatemenus` and `sliders` `label` text all support
E                               `meta`. One can access `meta` fields using template
E                               strings: `%{meta[i]}` where `i` is the index of the
E                               `meta` item in question. `meta` can also be an object
E                               for example `{key: value}` which can be accessed
E                               %{meta[key]}.
E                           metasrc
E                               Sets the source reference on Chart Studio Cloud for
E                               `meta`.
E                           minreducedheight
E                               Minimum height of the plot with margin.automargin
E                               applied (in px)
E                           minreducedwidth
E                               Minimum width of the plot with margin.automargin
E                               applied (in px)
E                           modebar
E                               :class:`plotly.graph_objects.layout.Modebar` instance
E                               or dict with compatible properties
E                           newselection
E                               :class:`plotly.graph_objects.layout.Newselection`
E                               instance or dict with compatible properties
E                           newshape
E                               :class:`plotly.graph_objects.layout.Newshape` instance
E                               or dict with compatible properties
E                           paper_bgcolor
E                               Sets the background color of the paper where the graph
E                               is drawn.
E                           piecolorway
E                               Sets the default pie slice colors. Defaults to the main
E                               `colorway` used for trace colors. If you specify a new
E                               list here it can still be extended with lighter and
E                               darker colors, see `extendpiecolors`.
E                           plot_bgcolor
E                               Sets the background color of the plotting area in-
E                               between x and y axes.
E                           polar
E                               :class:`plotly.graph_objects.layout.Polar` instance or
E                               dict with compatible properties
E                           scattergap
E                               Sets the gap (in plot fraction) between scatter points
E                               of adjacent location coordinates. Defaults to `bargap`.
E                           scattermode
E                               Determines how scatter points at the same location
E                               coordinate are displayed on the graph. With "group",
E                               the scatter points are plotted next to one another
E                               centered around the shared location. With "overlay",
E                               the scatter points are plotted over one another, you
E                               might need to reduce "opacity" to see multiple scatter
E                               points.
E                           scene
E                               :class:`plotly.graph_objects.layout.Scene` instance or
E                               dict with compatible properties
E                           selectdirection
E                               When `dragmode` is set to "select", this limits the
E                               selection of the drag to horizontal, vertical or
E                               diagonal. "h" only allows horizontal selection, "v"
E                               only vertical, "d" only diagonal and "any" sets no
E                               limit.
E                           selectionrevision
E                               Controls persistence of user-driven changes in selected
E                               points from all traces.
E                           selections
E                               A tuple of
E                               :class:`plotly.graph_objects.layout.Selection`
E                               instances or dicts with compatible properties
E                           selectiondefaults
E                               When used in a template (as
E                               layout.template.layout.selectiondefaults), sets the
E                               default property values to use for elements of
E                               layout.selections
E                           separators
E                               Sets the decimal and thousand separators. For example,
E                               *. * puts a '.' before decimals and a space between
E                               thousands. In English locales, dflt is ".," but other
E                               locales may alter this default.
E                           shapes
E                               A tuple of :class:`plotly.graph_objects.layout.Shape`
E                               instances or dicts with compatible properties
E                           shapedefaults
E                               When used in a template (as
E                               layout.template.layout.shapedefaults), sets the default
E                               property values to use for elements of layout.shapes
E                           showlegend
E                               Determines whether or not a legend is drawn. Default is
E                               `true` if there is a trace to show and any of these: a)
E                               Two or more traces would by default be shown in the
E                               legend. b) One pie trace is shown in the legend. c) One
E                               trace is explicitly given with `showlegend: true`.
E                           sliders
E                               A tuple of :class:`plotly.graph_objects.layout.Slider`
E                               instances or dicts with compatible properties
E                           sliderdefaults
E                               When used in a template (as
E                               layout.template.layout.sliderdefaults), sets the
E                               default property values to use for elements of
E                               layout.sliders
E                           smith
E                               :class:`plotly.graph_objects.layout.Smith` instance or
E                               dict with compatible properties
E                           spikedistance
E                               Sets the default distance (in pixels) to look for data
E                               to draw spikelines to (-1 means no cutoff, 0 means no
E                               looking for data). As with hoverdistance, distance does
E                               not apply to area-like objects. In addition, some
E                               objects can be hovered on but will not generate
E                               spikelines, such as scatter fills.
E                           sunburstcolorway
E                               Sets the default sunburst slice colors. Defaults to the
E                               main `colorway` used for trace colors. If you specify a
E                               new list here it can still be extended with lighter and
E                               darker colors, see `extendsunburstcolors`.
E                           template
E                               Default attributes to be applied to the plot. This
E                               should be a dict with format: `{'layout':
E                               layoutTemplate, 'data': {trace_type: [traceTemplate,
E                               ...], ...}}` where `layoutTemplate` is a dict matching
E                               the structure of `figure.layout` and `traceTemplate` is
E                               a dict matching the structure of the trace with type
E                               `trace_type` (e.g. 'scatter'). Alternatively, this may
E                               be specified as an instance of
E                               plotly.graph_objs.layout.Template.  Trace templates are
E                               applied cyclically to traces of each type. Container
E                               arrays (eg `annotations`) have special handling: An
E                               object ending in `defaults` (eg `annotationdefaults`)
E                               is applied to each array item. But if an item has a
E                               `templateitemname` key we look in the template array
E                               for an item with matching `name` and apply that
E                               instead. If no matching `name` is found we mark the
E                               item invisible. Any named template item not referenced
E                               is appended to the end of the array, so this can be
E                               used to add a watermark annotation or a logo image, for
E                               example. To omit one of these items on the plot, make
E                               an item with matching `templateitemname` and `visible:
E                               false`.
E                           ternary
E                               :class:`plotly.graph_objects.layout.Ternary` instance
E                               or dict with compatible properties
E                           title
E                               :class:`plotly.graph_objects.layout.Title` instance or
E                               dict with compatible properties
E                           titlefont
E                               Deprecated: Please use layout.title.font instead. Sets
E                               the title font. Note that the title's font used to be
E                               customized by the now deprecated `titlefont` attribute.
E                           transition
E                               Sets transition options used during Plotly.react
E                               updates.
E                           treemapcolorway
E                               Sets the default treemap slice colors. Defaults to the
E                               main `colorway` used for trace colors. If you specify a
E                               new list here it can still be extended with lighter and
E                               darker colors, see `extendtreemapcolors`.
E                           uirevision
E                               Used to allow user interactions with the plot to
E                               persist after `Plotly.react` calls that are unaware of
E                               these interactions. If `uirevision` is omitted, or if
E                               it is given and it changed from the previous
E                               `Plotly.react` call, the exact new figure is used. If
E                               `uirevision` is truthy and did NOT change, any
E                               attribute that has been affected by user interactions
E                               and did not receive a different value in the new figure
E                               will keep the interaction value. `layout.uirevision`
E                               attribute serves as the default for `uirevision`
E                               attributes in various sub-containers. For finer control
E                               you can set these sub-attributes directly. For example,
E                               if your app separately controls the data on the x and y
E                               axes you might set `xaxis.uirevision=*time*` and
E                               `yaxis.uirevision=*cost*`. Then if only the y data is
E                               changed, you can update `yaxis.uirevision=*quantity*`
E                               and the y axis range will reset but the x axis range
E                               will retain any user-driven zoom.
E                           uniformtext
E                               :class:`plotly.graph_objects.layout.Uniformtext`
E                               instance or dict with compatible properties
E                           updatemenus
E                               A tuple of
E                               :class:`plotly.graph_objects.layout.Updatemenu`
E                               instances or dicts with compatible properties
E                           updatemenudefaults
E                               When used in a template (as
E                               layout.template.layout.updatemenudefaults), sets the
E                               default property values to use for elements of
E                               layout.updatemenus
E                           violingap
E                               Sets the gap (in plot fraction) between violins of
E                               adjacent location coordinates. Has no effect on traces
E                               that have "width" set.
E                           violingroupgap
E                               Sets the gap (in plot fraction) between violins of the
E                               same location coordinate. Has no effect on traces that
E                               have "width" set.
E                           violinmode
E                               Determines how violins at the same location coordinate
E                               are displayed on the graph. If "group", the violins are
E                               plotted next to one another centered around the shared
E                               location. If "overlay", the violins are plotted over
E                               one another, you might need to set "opacity" to see
E                               them multiple violins. Has no effect on traces that
E                               have "width" set.
E                           waterfallgap
E                               Sets the gap (in plot fraction) between bars of
E                               adjacent location coordinates.
E                           waterfallgroupgap
E                               Sets the gap (in plot fraction) between bars of the
E                               same location coordinate.
E                           waterfallmode
E                               Determines how bars at the same location coordinate are
E                               displayed on the graph. With "group", the bars are
E                               plotted next to one another centered around the shared
E                               location. With "overlay", the bars are plotted over one
E                               another, you might need to reduce "opacity" to see
E                               multiple bars.
E                           width
E                               Sets the plot's width (in px).
E                           xaxis
E                               :class:`plotly.graph_objects.layout.XAxis` instance or
E                               dict with compatible properties
E                           yaxis
E                               :class:`plotly.graph_objects.layout.YAxis` instance or
E                               dict with compatible properties
E                           
E                   Did you mean "ternary"?
E                   
E                   Bad property path:
E                   secondary_y
E                   ^^^^^^^^^

.venv/lib/python3.11/site-packages/plotly/basedatatypes.py:3890: ValueError
_______________________________ test_create_plot _______________________________

sample_dataframe =      feature  hit_count  current_model  test_model  count
0   0.304717          0       0.828290    0.411801     97
1 ...  0       0.919766    0.153177     42
99 -0.905479          1       0.129983    0.450580     95

[100 rows x 5 columns]

    def test_create_plot(sample_dataframe):
        """Test the create_plot function."""
>       fig = create_plot(sample_dataframe, "feature")

src/glam/tests/test_plots.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/glam/plots.py:180: in create_plot
    return _update_layout(
src/glam/plots.py:159: in _update_layout
    fig.update_layout(
.venv/lib/python3.11/site-packages/plotly/graph_objs/_figure.py:788: in update_layout
    return super(Figure, self).update_layout(dict1, overwrite, **kwargs)
.venv/lib/python3.11/site-packages/plotly/basedatatypes.py:1391: in update_layout
    self.layout.update(dict1, overwrite=overwrite, **kwargs)
.venv/lib/python3.11/site-packages/plotly/basedatatypes.py:5131: in update
    BaseFigure._perform_update(self, kwargs, overwrite=overwrite)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plotly_obj = Layout({
    'template': '...',
    'xaxis': {'anchor': 'y', 'domain': [0.0, 0.94]},
    'yaxis': {'anchor': 'x', 'domain': [0.0, 1.0]},
    'yaxis2': {'anchor': 'x', 'overlaying': 'y', 'side': 'right'}
})
update_obj = {'secondary_y': False, 'showlegend': True, 'title': 'Actual vs. Model Predictions', 'xaxis_title': 'feature', ...}
overwrite = False

    @staticmethod
    def _perform_update(plotly_obj, update_obj, overwrite=False):
        """
        Helper to support the update() methods on :class:`BaseFigure` and
        :class:`BasePlotlyType`
    
        Parameters
        ----------
        plotly_obj : BasePlotlyType|tuple[BasePlotlyType]
            Object to up updated
        update_obj : dict|list[dict]|tuple[dict]
            When ``plotly_obj`` is an instance of :class:`BaseFigure`,
            ``update_obj`` should be a dict
    
            When ``plotly_obj`` is a tuple of instances of
            :class:`BasePlotlyType`, ``update_obj`` should be a tuple or list
            of dicts
        """
        from _plotly_utils.basevalidators import (
            CompoundValidator,
            CompoundArrayValidator,
        )
    
        if update_obj is None:
            # Nothing to do
            return
        elif isinstance(plotly_obj, BasePlotlyType):
    
            # Handle initializing subplot ids
            # -------------------------------
            # This should be valid even if xaxis2 hasn't been initialized:
            # >>> layout.update(xaxis2={'title': 'xaxis 2'})
            for key in update_obj:
                # special handling for missing keys that match _subplot_re_match
                if key not in plotly_obj and isinstance(plotly_obj, BaseLayoutType):
                    # try _subplot_re_match
                    match = plotly_obj._subplot_re_match(key)
                    if match:
                        # We need to create a subplotid object
                        plotly_obj[key] = {}
                        continue
    
                err = _check_path_in_prop_tree(plotly_obj, key, error_cast=ValueError)
                if err is not None:
>                   raise err
E                   ValueError: Invalid property specified for object of type plotly.graph_objs.Layout: 'secondary'
E                   
E                   Did you mean "ternary"?
E                   
E                       Valid properties:
E                           activeselection
E                               :class:`plotly.graph_objects.layout.Activeselection`
E                               instance or dict with compatible properties
E                           activeshape
E                               :class:`plotly.graph_objects.layout.Activeshape`
E                               instance or dict with compatible properties
E                           annotations
E                               A tuple of
E                               :class:`plotly.graph_objects.layout.Annotation`
E                               instances or dicts with compatible properties
E                           annotationdefaults
E                               When used in a template (as
E                               layout.template.layout.annotationdefaults), sets the
E                               default property values to use for elements of
E                               layout.annotations
E                           autosize
E                               Determines whether or not a layout width or height that
E                               has been left undefined by the user is initialized on
E                               each relayout. Note that, regardless of this attribute,
E                               an undefined layout width or height is always
E                               initialized on the first call to plot.
E                           autotypenumbers
E                               Using "strict" a numeric string in trace data is not
E                               converted to a number. Using *convert types* a numeric
E                               string in trace data may be treated as a number during
E                               automatic axis `type` detection. This is the default
E                               value; however it could be overridden for individual
E                               axes.
E                           barcornerradius
E                               Sets the rounding of bar corners. May be an integer
E                               number of pixels, or a percentage of bar width (as a
E                               string ending in %).
E                           bargap
E                               Sets the gap (in plot fraction) between bars of
E                               adjacent location coordinates.
E                           bargroupgap
E                               Sets the gap (in plot fraction) between bars of the
E                               same location coordinate.
E                           barmode
E                               Determines how bars at the same location coordinate are
E                               displayed on the graph. With "stack", the bars are
E                               stacked on top of one another With "relative", the bars
E                               are stacked on top of one another, with negative values
E                               below the axis, positive values above With "group", the
E                               bars are plotted next to one another centered around
E                               the shared location. With "overlay", the bars are
E                               plotted over one another, you might need to reduce
E                               "opacity" to see multiple bars.
E                           barnorm
E                               Sets the normalization for bar traces on the graph.
E                               With "fraction", the value of each bar is divided by
E                               the sum of all values at that location coordinate.
E                               "percent" is the same but multiplied by 100 to show
E                               percentages.
E                           boxgap
E                               Sets the gap (in plot fraction) between boxes of
E                               adjacent location coordinates. Has no effect on traces
E                               that have "width" set.
E                           boxgroupgap
E                               Sets the gap (in plot fraction) between boxes of the
E                               same location coordinate. Has no effect on traces that
E                               have "width" set.
E                           boxmode
E                               Determines how boxes at the same location coordinate
E                               are displayed on the graph. If "group", the boxes are
E                               plotted next to one another centered around the shared
E                               location. If "overlay", the boxes are plotted over one
E                               another, you might need to set "opacity" to see them
E                               multiple boxes. Has no effect on traces that have
E                               "width" set.
E                           calendar
E                               Sets the default calendar system to use for
E                               interpreting and displaying dates throughout the plot.
E                           clickmode
E                               Determines the mode of single click interactions.
E                               "event" is the default value and emits the
E                               `plotly_click` event. In addition this mode emits the
E                               `plotly_selected` event in drag modes "lasso" and
E                               "select", but with no event data attached (kept for
E                               compatibility reasons). The "select" flag enables
E                               selecting single data points via click. This mode also
E                               supports persistent selections, meaning that pressing
E                               Shift while clicking, adds to / subtracts from an
E                               existing selection. "select" with `hovermode`: "x" can
E                               be confusing, consider explicitly setting `hovermode`:
E                               "closest" when using this feature. Selection events are
E                               sent accordingly as long as "event" flag is set as
E                               well. When the "event" flag is missing, `plotly_click`
E                               and `plotly_selected` events are not fired.
E                           coloraxis
E                               :class:`plotly.graph_objects.layout.Coloraxis` instance
E                               or dict with compatible properties
E                           colorscale
E                               :class:`plotly.graph_objects.layout.Colorscale`
E                               instance or dict with compatible properties
E                           colorway
E                               Sets the default trace colors.
E                           computed
E                               Placeholder for exporting automargin-impacting values
E                               namely `margin.t`, `margin.b`, `margin.l` and
E                               `margin.r` in "full-json" mode.
E                           datarevision
E                               If provided, a changed value tells `Plotly.react` that
E                               one or more data arrays has changed. This way you can
E                               modify arrays in-place rather than making a complete
E                               new copy for an incremental change. If NOT provided,
E                               `Plotly.react` assumes that data arrays are being
E                               treated as immutable, thus any data array with a
E                               different identity from its predecessor contains new
E                               data.
E                           dragmode
E                               Determines the mode of drag interactions. "select" and
E                               "lasso" apply only to scatter traces with markers or
E                               text. "orbit" and "turntable" apply only to 3D scenes.
E                           editrevision
E                               Controls persistence of user-driven changes in
E                               `editable: true` configuration, other than trace names
E                               and axis titles. Defaults to `layout.uirevision`.
E                           extendfunnelareacolors
E                               If `true`, the funnelarea slice colors (whether given
E                               by `funnelareacolorway` or inherited from `colorway`)
E                               will be extended to three times its original length by
E                               first repeating every color 20% lighter then each color
E                               20% darker. This is intended to reduce the likelihood
E                               of reusing the same color when you have many slices,
E                               but you can set `false` to disable. Colors provided in
E                               the trace, using `marker.colors`, are never extended.
E                           extendiciclecolors
E                               If `true`, the icicle slice colors (whether given by
E                               `iciclecolorway` or inherited from `colorway`) will be
E                               extended to three times its original length by first
E                               repeating every color 20% lighter then each color 20%
E                               darker. This is intended to reduce the likelihood of
E                               reusing the same color when you have many slices, but
E                               you can set `false` to disable. Colors provided in the
E                               trace, using `marker.colors`, are never extended.
E                           extendpiecolors
E                               If `true`, the pie slice colors (whether given by
E                               `piecolorway` or inherited from `colorway`) will be
E                               extended to three times its original length by first
E                               repeating every color 20% lighter then each color 20%
E                               darker. This is intended to reduce the likelihood of
E                               reusing the same color when you have many slices, but
E                               you can set `false` to disable. Colors provided in the
E                               trace, using `marker.colors`, are never extended.
E                           extendsunburstcolors
E                               If `true`, the sunburst slice colors (whether given by
E                               `sunburstcolorway` or inherited from `colorway`) will
E                               be extended to three times its original length by first
E                               repeating every color 20% lighter then each color 20%
E                               darker. This is intended to reduce the likelihood of
E                               reusing the same color when you have many slices, but
E                               you can set `false` to disable. Colors provided in the
E                               trace, using `marker.colors`, are never extended.
E                           extendtreemapcolors
E                               If `true`, the treemap slice colors (whether given by
E                               `treemapcolorway` or inherited from `colorway`) will be
E                               extended to three times its original length by first
E                               repeating every color 20% lighter then each color 20%
E                               darker. This is intended to reduce the likelihood of
E                               reusing the same color when you have many slices, but
E                               you can set `false` to disable. Colors provided in the
E                               trace, using `marker.colors`, are never extended.
E                           font
E                               Sets the global font. Note that fonts used in traces
E                               and other layout components inherit from the global
E                               font.
E                           funnelareacolorway
E                               Sets the default funnelarea slice colors. Defaults to
E                               the main `colorway` used for trace colors. If you
E                               specify a new list here it can still be extended with
E                               lighter and darker colors, see
E                               `extendfunnelareacolors`.
E                           funnelgap
E                               Sets the gap (in plot fraction) between bars of
E                               adjacent location coordinates.
E                           funnelgroupgap
E                               Sets the gap (in plot fraction) between bars of the
E                               same location coordinate.
E                           funnelmode
E                               Determines how bars at the same location coordinate are
E                               displayed on the graph. With "stack", the bars are
E                               stacked on top of one another With "group", the bars
E                               are plotted next to one another centered around the
E                               shared location. With "overlay", the bars are plotted
E                               over one another, you might need to reduce "opacity" to
E                               see multiple bars.
E                           geo
E                               :class:`plotly.graph_objects.layout.Geo` instance or
E                               dict with compatible properties
E                           grid
E                               :class:`plotly.graph_objects.layout.Grid` instance or
E                               dict with compatible properties
E                           height
E                               Sets the plot's height (in px).
E                           hiddenlabels
E                               hiddenlabels is the funnelarea & pie chart analog of
E                               visible:'legendonly' but it can contain many labels,
E                               and can simultaneously hide slices from several
E                               pies/funnelarea charts
E                           hiddenlabelssrc
E                               Sets the source reference on Chart Studio Cloud for
E                               `hiddenlabels`.
E                           hidesources
E                               Determines whether or not a text link citing the data
E                               source is placed at the bottom-right cored of the
E                               figure. Has only an effect only on graphs that have
E                               been generated via forked graphs from the Chart Studio
E                               Cloud (at https://chart-studio.plotly.com or on-
E                               premise).
E                           hoverdistance
E                               Sets the default distance (in pixels) to look for data
E                               to add hover labels (-1 means no cutoff, 0 means no
E                               looking for data). This is only a real distance for
E                               hovering on point-like objects, like scatter points.
E                               For area-like objects (bars, scatter fills, etc)
E                               hovering is on inside the area and off outside, but
E                               these objects will not supersede hover on point-like
E                               objects in case of conflict.
E                           hoverlabel
E                               :class:`plotly.graph_objects.layout.Hoverlabel`
E                               instance or dict with compatible properties
E                           hovermode
E                               Determines the mode of hover interactions. If
E                               "closest", a single hoverlabel will appear for the
E                               "closest" point within the `hoverdistance`. If "x" (or
E                               "y"), multiple hoverlabels will appear for multiple
E                               points at the "closest" x- (or y-) coordinate within
E                               the `hoverdistance`, with the caveat that no more than
E                               one hoverlabel will appear per trace. If *x unified*
E                               (or *y unified*), a single hoverlabel will appear
E                               multiple points at the closest x- (or y-) coordinate
E                               within the `hoverdistance` with the caveat that no more
E                               than one hoverlabel will appear per trace. In this
E                               mode, spikelines are enabled by default perpendicular
E                               to the specified axis. If false, hover interactions are
E                               disabled.
E                           hoversubplots
E                               Determines expansion of hover effects to other subplots
E                               If "single" just the axis pair of the primary point is
E                               included without overlaying subplots. If "overlaying"
E                               all subplots using the main axis and occupying the same
E                               space are included. If "axis", also include stacked
E                               subplots using the same axis when `hovermode` is set to
E                               "x", *x unified*, "y" or *y unified*.
E                           iciclecolorway
E                               Sets the default icicle slice colors. Defaults to the
E                               main `colorway` used for trace colors. If you specify a
E                               new list here it can still be extended with lighter and
E                               darker colors, see `extendiciclecolors`.
E                           images
E                               A tuple of :class:`plotly.graph_objects.layout.Image`
E                               instances or dicts with compatible properties
E                           imagedefaults
E                               When used in a template (as
E                               layout.template.layout.imagedefaults), sets the default
E                               property values to use for elements of layout.images
E                           legend
E                               :class:`plotly.graph_objects.layout.Legend` instance or
E                               dict with compatible properties
E                           mapbox
E                               :class:`plotly.graph_objects.layout.Mapbox` instance or
E                               dict with compatible properties
E                           margin
E                               :class:`plotly.graph_objects.layout.Margin` instance or
E                               dict with compatible properties
E                           meta
E                               Assigns extra meta information that can be used in
E                               various `text` attributes. Attributes such as the
E                               graph, axis and colorbar `title.text`, annotation
E                               `text` `trace.name` in legend items, `rangeselector`,
E                               `updatemenus` and `sliders` `label` text all support
E                               `meta`. One can access `meta` fields using template
E                               strings: `%{meta[i]}` where `i` is the index of the
E                               `meta` item in question. `meta` can also be an object
E                               for example `{key: value}` which can be accessed
E                               %{meta[key]}.
E                           metasrc
E                               Sets the source reference on Chart Studio Cloud for
E                               `meta`.
E                           minreducedheight
E                               Minimum height of the plot with margin.automargin
E                               applied (in px)
E                           minreducedwidth
E                               Minimum width of the plot with margin.automargin
E                               applied (in px)
E                           modebar
E                               :class:`plotly.graph_objects.layout.Modebar` instance
E                               or dict with compatible properties
E                           newselection
E                               :class:`plotly.graph_objects.layout.Newselection`
E                               instance or dict with compatible properties
E                           newshape
E                               :class:`plotly.graph_objects.layout.Newshape` instance
E                               or dict with compatible properties
E                           paper_bgcolor
E                               Sets the background color of the paper where the graph
E                               is drawn.
E                           piecolorway
E                               Sets the default pie slice colors. Defaults to the main
E                               `colorway` used for trace colors. If you specify a new
E                               list here it can still be extended with lighter and
E                               darker colors, see `extendpiecolors`.
E                           plot_bgcolor
E                               Sets the background color of the plotting area in-
E                               between x and y axes.
E                           polar
E                               :class:`plotly.graph_objects.layout.Polar` instance or
E                               dict with compatible properties
E                           scattergap
E                               Sets the gap (in plot fraction) between scatter points
E                               of adjacent location coordinates. Defaults to `bargap`.
E                           scattermode
E                               Determines how scatter points at the same location
E                               coordinate are displayed on the graph. With "group",
E                               the scatter points are plotted next to one another
E                               centered around the shared location. With "overlay",
E                               the scatter points are plotted over one another, you
E                               might need to reduce "opacity" to see multiple scatter
E                               points.
E                           scene
E                               :class:`plotly.graph_objects.layout.Scene` instance or
E                               dict with compatible properties
E                           selectdirection
E                               When `dragmode` is set to "select", this limits the
E                               selection of the drag to horizontal, vertical or
E                               diagonal. "h" only allows horizontal selection, "v"
E                               only vertical, "d" only diagonal and "any" sets no
E                               limit.
E                           selectionrevision
E                               Controls persistence of user-driven changes in selected
E                               points from all traces.
E                           selections
E                               A tuple of
E                               :class:`plotly.graph_objects.layout.Selection`
E                               instances or dicts with compatible properties
E                           selectiondefaults
E                               When used in a template (as
E                               layout.template.layout.selectiondefaults), sets the
E                               default property values to use for elements of
E                               layout.selections
E                           separators
E                               Sets the decimal and thousand separators. For example,
E                               *. * puts a '.' before decimals and a space between
E                               thousands. In English locales, dflt is ".," but other
E                               locales may alter this default.
E                           shapes
E                               A tuple of :class:`plotly.graph_objects.layout.Shape`
E                               instances or dicts with compatible properties
E                           shapedefaults
E                               When used in a template (as
E                               layout.template.layout.shapedefaults), sets the default
E                               property values to use for elements of layout.shapes
E                           showlegend
E                               Determines whether or not a legend is drawn. Default is
E                               `true` if there is a trace to show and any of these: a)
E                               Two or more traces would by default be shown in the
E                               legend. b) One pie trace is shown in the legend. c) One
E                               trace is explicitly given with `showlegend: true`.
E                           sliders
E                               A tuple of :class:`plotly.graph_objects.layout.Slider`
E                               instances or dicts with compatible properties
E                           sliderdefaults
E                               When used in a template (as
E                               layout.template.layout.sliderdefaults), sets the
E                               default property values to use for elements of
E                               layout.sliders
E                           smith
E                               :class:`plotly.graph_objects.layout.Smith` instance or
E                               dict with compatible properties
E                           spikedistance
E                               Sets the default distance (in pixels) to look for data
E                               to draw spikelines to (-1 means no cutoff, 0 means no
E                               looking for data). As with hoverdistance, distance does
E                               not apply to area-like objects. In addition, some
E                               objects can be hovered on but will not generate
E                               spikelines, such as scatter fills.
E                           sunburstcolorway
E                               Sets the default sunburst slice colors. Defaults to the
E                               main `colorway` used for trace colors. If you specify a
E                               new list here it can still be extended with lighter and
E                               darker colors, see `extendsunburstcolors`.
E                           template
E                               Default attributes to be applied to the plot. This
E                               should be a dict with format: `{'layout':
E                               layoutTemplate, 'data': {trace_type: [traceTemplate,
E                               ...], ...}}` where `layoutTemplate` is a dict matching
E                               the structure of `figure.layout` and `traceTemplate` is
E                               a dict matching the structure of the trace with type
E                               `trace_type` (e.g. 'scatter'). Alternatively, this may
E                               be specified as an instance of
E                               plotly.graph_objs.layout.Template.  Trace templates are
E                               applied cyclically to traces of each type. Container
E                               arrays (eg `annotations`) have special handling: An
E                               object ending in `defaults` (eg `annotationdefaults`)
E                               is applied to each array item. But if an item has a
E                               `templateitemname` key we look in the template array
E                               for an item with matching `name` and apply that
E                               instead. If no matching `name` is found we mark the
E                               item invisible. Any named template item not referenced
E                               is appended to the end of the array, so this can be
E                               used to add a watermark annotation or a logo image, for
E                               example. To omit one of these items on the plot, make
E                               an item with matching `templateitemname` and `visible:
E                               false`.
E                           ternary
E                               :class:`plotly.graph_objects.layout.Ternary` instance
E                               or dict with compatible properties
E                           title
E                               :class:`plotly.graph_objects.layout.Title` instance or
E                               dict with compatible properties
E                           titlefont
E                               Deprecated: Please use layout.title.font instead. Sets
E                               the title font. Note that the title's font used to be
E                               customized by the now deprecated `titlefont` attribute.
E                           transition
E                               Sets transition options used during Plotly.react
E                               updates.
E                           treemapcolorway
E                               Sets the default treemap slice colors. Defaults to the
E                               main `colorway` used for trace colors. If you specify a
E                               new list here it can still be extended with lighter and
E                               darker colors, see `extendtreemapcolors`.
E                           uirevision
E                               Used to allow user interactions with the plot to
E                               persist after `Plotly.react` calls that are unaware of
E                               these interactions. If `uirevision` is omitted, or if
E                               it is given and it changed from the previous
E                               `Plotly.react` call, the exact new figure is used. If
E                               `uirevision` is truthy and did NOT change, any
E                               attribute that has been affected by user interactions
E                               and did not receive a different value in the new figure
E                               will keep the interaction value. `layout.uirevision`
E                               attribute serves as the default for `uirevision`
E                               attributes in various sub-containers. For finer control
E                               you can set these sub-attributes directly. For example,
E                               if your app separately controls the data on the x and y
E                               axes you might set `xaxis.uirevision=*time*` and
E                               `yaxis.uirevision=*cost*`. Then if only the y data is
E                               changed, you can update `yaxis.uirevision=*quantity*`
E                               and the y axis range will reset but the x axis range
E                               will retain any user-driven zoom.
E                           uniformtext
E                               :class:`plotly.graph_objects.layout.Uniformtext`
E                               instance or dict with compatible properties
E                           updatemenus
E                               A tuple of
E                               :class:`plotly.graph_objects.layout.Updatemenu`
E                               instances or dicts with compatible properties
E                           updatemenudefaults
E                               When used in a template (as
E                               layout.template.layout.updatemenudefaults), sets the
E                               default property values to use for elements of
E                               layout.updatemenus
E                           violingap
E                               Sets the gap (in plot fraction) between violins of
E                               adjacent location coordinates. Has no effect on traces
E                               that have "width" set.
E                           violingroupgap
E                               Sets the gap (in plot fraction) between violins of the
E                               same location coordinate. Has no effect on traces that
E                               have "width" set.
E                           violinmode
E                               Determines how violins at the same location coordinate
E                               are displayed on the graph. If "group", the violins are
E                               plotted next to one another centered around the shared
E                               location. If "overlay", the violins are plotted over
E                               one another, you might need to set "opacity" to see
E                               them multiple violins. Has no effect on traces that
E                               have "width" set.
E                           waterfallgap
E                               Sets the gap (in plot fraction) between bars of
E                               adjacent location coordinates.
E                           waterfallgroupgap
E                               Sets the gap (in plot fraction) between bars of the
E                               same location coordinate.
E                           waterfallmode
E                               Determines how bars at the same location coordinate are
E                               displayed on the graph. With "group", the bars are
E                               plotted next to one another centered around the shared
E                               location. With "overlay", the bars are plotted over one
E                               another, you might need to reduce "opacity" to see
E                               multiple bars.
E                           width
E                               Sets the plot's width (in px).
E                           xaxis
E                               :class:`plotly.graph_objects.layout.XAxis` instance or
E                               dict with compatible properties
E                           yaxis
E                               :class:`plotly.graph_objects.layout.YAxis` instance or
E                               dict with compatible properties
E                           
E                   Did you mean "ternary"?
E                   
E                   Bad property path:
E                   secondary_y
E                   ^^^^^^^^^

.venv/lib/python3.11/site-packages/plotly/basedatatypes.py:3890: ValueError
________________________ test_create_ave_by_level_data _________________________

sample_dataframe =      feature  hit_count  current_model  test_model  count
0   0.304717          0       0.828290    0.411801     97
1 ...  0       0.919766    0.153177     42
99 -0.905479          1       0.129983    0.450580     95

[100 rows x 5 columns]

    def test_create_ave_by_level_data(sample_dataframe):
        """Test the create_ave_by_level_data function."""
        result = create_ave_by_level_data(sample_dataframe, "feature")
        assert isinstance(
            result, pd.DataFrame
        ), f"Expected pd.DataFrame, got {type(result)}"
        assert "hit_count" in result.columns, f"hit_count not in columns:\n{result.columns}"
        assert "count" in result.columns, f"count not in columns:\n{result.columns}"
>       assert result.index.name == "feature", f"Expected feature, got {result.index.name}"
E       AssertionError: Expected feature, got None
E       assert None == 'feature'
E        +  where None = Index([ 0, 60, 59, 58, 57, 56, 55, 62, 54, 51, 50, 98, 48, 47, 45, 52, 64, 65,\n       66, 95, 90, 89, 87, 83, 82, 79, ...1, 42, 43, 44, 33, 46, 32, 31, 29, 73, 27, 25, 24,\n       23, 22, 61, 63, 18, 16, 67, 14, 53, 49],\n      dtype='int64').name
E        +    where Index([ 0, 60, 59, 58, 57, 56, 55, 62, 54, 51, 50, 98, 48, 47, 45, 52, 64, 65,\n       66, 95, 90, 89, 87, 83, 82, 79, ...1, 42, 43, 44, 33, 46, 32, 31, 29, 73, 27, 25, 24,\n       23, 22, 61, 63, 18, 16, 67, 14, 53, 49],\n      dtype='int64') =      feature  hit_count  current_model  test_model  count\n0  -1.951035        0.0       0.683623    0.408130      1\n60...1.0       0.621972    0.219940      1\n49 -0.016801        1.0       0.342658    0.321775      1\n\n[100 rows x 5 columns].index

src/glam/tests/test_plots.py:128: AssertionError
____________________________ test_create_test_model ____________________________

fitted_model = <statsmodels.genmod.generalized_linear_model.GLMResultsWrapper object at 0x7f2ff6efe010>

    def test_create_test_model(fitted_model):
        """Test the create_test_model function."""
>       new_model = create_test_model(fitted_model, "feature")

src/glam/tests/test_plots.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/glam/plots.py:211: in create_test_model
    model2 = model.copy()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <statsmodels.genmod.generalized_linear_model.GLMResultsWrapper object at 0x7f2ff6efe010>
attr = 'copy'

    def __getattribute__(self, attr):
        get = lambda name: object.__getattribute__(self, name)
    
        try:
            results = get('_results')
        except AttributeError:
            pass
    
        try:
            return get(attr)
        except AttributeError:
            pass
    
>       obj = getattr(results, attr)
E       AttributeError: 'GLMResults' object has no attribute 'copy'

.venv/lib/python3.11/site-packages/statsmodels/base/wrapper.py:34: AttributeError
_________________________ test_create_pre_binning_data _________________________

default_model_data = DefaultModelData(y='hit_count', cv='count', df.shape=(100, 5))
fitted_model = <statsmodels.genmod.generalized_linear_model.GLMResultsWrapper object at 0x7f2ff6cbfbd0>

    def test_create_pre_binning_data(default_model_data, fitted_model):
        """Test the create_pre_binning_data function."""
>       df = create_pre_binning_data(default_model_data, fitted_model, "feature")

src/glam/tests/test_plots.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/glam/plots.py:221: in create_pre_binning_data
    model2 = create_test_model(model, test_feature)
src/glam/plots.py:211: in create_test_model
    model2 = model.copy()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <statsmodels.genmod.generalized_linear_model.GLMResultsWrapper object at 0x7f2ff6cbfbd0>
attr = 'copy'

    def __getattribute__(self, attr):
        get = lambda name: object.__getattribute__(self, name)
    
        try:
            results = get('_results')
        except AttributeError:
            pass
    
        try:
            return get(attr)
        except AttributeError:
            pass
    
>       obj = getattr(results, attr)
E       AttributeError: 'GLMResults' object has no attribute 'copy'

.venv/lib/python3.11/site-packages/statsmodels/base/wrapper.py:34: AttributeError
______________________________ test_numeric_plot _______________________________

default_model_data = DefaultModelData(y='hit_count', cv='count', df.shape=(100, 5))
fitted_model = <statsmodels.genmod.generalized_linear_model.GLMResultsWrapper object at 0x7f2ff73692d0>

    def test_numeric_plot(default_model_data, fitted_model):
        """Test the numeric_plot function."""
>       fig = numeric_plot(default_model_data, fitted_model, "feature", n_bins=5)

src/glam/tests/test_plots.py:149: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/glam/plots.py:238: in numeric_plot
    df = create_pre_binning_data(data, model, test_feature)
src/glam/plots.py:221: in create_pre_binning_data
    model2 = create_test_model(model, test_feature)
src/glam/plots.py:211: in create_test_model
    model2 = model.copy()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <statsmodels.genmod.generalized_linear_model.GLMResultsWrapper object at 0x7f2ff73692d0>
attr = 'copy'

    def __getattribute__(self, attr):
        get = lambda name: object.__getattribute__(self, name)
    
        try:
            results = get('_results')
        except AttributeError:
            pass
    
        try:
            return get(attr)
        except AttributeError:
            pass
    
>       obj = getattr(results, attr)
E       AttributeError: 'GLMResults' object has no attribute 'copy'

.venv/lib/python3.11/site-packages/statsmodels/base/wrapper.py:34: AttributeError
____________________________ test_categorical_plot _____________________________

default_model_data = DefaultModelData(y='hit_count', cv='count', df.shape=(100, 5))
fitted_model = <statsmodels.genmod.generalized_linear_model.GLMResultsWrapper object at 0x7f2ff6b98250>

    def test_categorical_plot(default_model_data, fitted_model):
        """Test the categorical_plot function."""
>       fig = categorical_plot(default_model_data, fitted_model, "feature")

src/glam/tests/test_plots.py:158: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/glam/plots.py:248: in categorical_plot
    df = create_pre_binning_data(data, model, test_feature)
src/glam/plots.py:221: in create_pre_binning_data
    model2 = create_test_model(model, test_feature)
src/glam/plots.py:211: in create_test_model
    model2 = model.copy()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <statsmodels.genmod.generalized_linear_model.GLMResultsWrapper object at 0x7f2ff6b98250>
attr = 'copy'

    def __getattribute__(self, attr):
        get = lambda name: object.__getattribute__(self, name)
    
        try:
            results = get('_results')
        except AttributeError:
            pass
    
        try:
            return get(attr)
        except AttributeError:
            pass
    
>       obj = getattr(results, attr)
E       AttributeError: 'GLMResults' object has no attribute 'copy'

.venv/lib/python3.11/site-packages/statsmodels/base/wrapper.py:34: AttributeError
=========================== short test summary info ============================
FAILED src/glam/tests/test_plots.py::test_add_bar - Exception: In order to re...
FAILED src/glam/tests/test_plots.py::test_add_scatter - Exception: In order t...
FAILED src/glam/tests/test_plots.py::test_update_layout - ValueError: Invalid...
FAILED src/glam/tests/test_plots.py::test_create_plot - ValueError: Invalid p...
FAILED src/glam/tests/test_plots.py::test_create_ave_by_level_data - Assertio...
FAILED src/glam/tests/test_plots.py::test_create_test_model - AttributeError:...
FAILED src/glam/tests/test_plots.py::test_create_pre_binning_data - Attribute...
FAILED src/glam/tests/test_plots.py::test_numeric_plot - AttributeError: 'GLM...
FAILED src/glam/tests/test_plots.py::test_categorical_plot - AttributeError: ...
================== 9 failed, 1 passed, 18 deselected in 3.47s ==================
